{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nconst toDay = e => {\n  const date = e ? new Date(e) : new Date();\n  return `${date.getFullYear()}-` + `00${date.getMonth() + 1}`.slice(-2) + `-${('00' + date.getDate()).slice(-2)}`;\n};\nconst fImage = require('@/assets/f_type.png');\nconst yImage = require('@/assets/y_type.png');\nconst mImage = require('@/assets/m_type.png');\nconst gImage = require('@/assets/g_type.png');\nconst fPimage = require('@/assets/Pattern1.png');\nconst yPimage = require('@/assets/Pattern2.png');\nconst mPimage = require('@/assets/Pattern3.png');\nconst gPimage = require('@/assets/Pattern4.png');\nconst Months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\nconst initPlan = {\n  id: null,\n  date: null,\n  name: null,\n  category: null,\n  time: null,\n  partId: null,\n  quantitative: null\n};\nexport default {\n  name: 'CalendarPage',\n  components: {},\n  mixins: [],\n  props: {},\n  data() {\n    return {\n      calDate: toDay(),\n      calData: [],\n      calPhImgArr: [fPimage, yPimage, mPimage, gPimage],\n      calDataDate: undefined,\n      categoryOptions: [{\n        label: 'Fitness & Gym',\n        value: 0,\n        img: fImage\n      }, {\n        label: 'Yoga',\n        value: 1,\n        img: yImage\n      }, {\n        label: 'Mindfulness',\n        value: 2,\n        img: mImage\n      }, {\n        label: 'Gymnastics',\n        value: 3,\n        img: gImage\n      }],\n      partment: [{\n        label: 'chest',\n        value: 0\n      }, {\n        label: 'shoulder',\n        value: 1\n      }, {\n        label: 'back',\n        value: 2\n      }, {\n        label: 'buttocks',\n        value: 3\n      }, {\n        label: 'leg',\n        value: 4\n      }, {\n        label: 'biceps',\n        value: 5\n      }, {\n        label: 'triceps',\n        value: 6\n      }],\n      showEvent: {\n        open: false,\n        date: undefined,\n        title: 'Plans',\n        data: [],\n        calMarks: []\n      },\n      addEvent: {\n        open: false,\n        title: 'Add Plan',\n        form: {\n          ...initPlan\n        },\n        width: '600px'\n      },\n      rules: {\n        name: [{\n          required: true,\n          message: \"Please input name\",\n          trigger: \"blur\"\n        }],\n        category: [{\n          required: true,\n          message: \"Please select category\",\n          trigger: \"blur\"\n        }],\n        time: [{\n          required: true,\n          message: \"Please input time\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^\\d+$/,\n          message: \"Please input number\",\n          trigger: \"blur\"\n        }],\n        partId: [{\n          required: true,\n          message: \"Please select partment\",\n          trigger: \"blur\"\n        }],\n        quantitative: [{\n          required: true,\n          message: \"Please input quantitative\",\n          trigger: \"blur\"\n        }, {\n          pattern: /^\\d+$/,\n          message: \"Please input number\",\n          trigger: \"blur\"\n        }],\n        date: [{\n          required: true,\n          message: \"Please select date\",\n          trigger: \"blur\"\n        }]\n      },\n      isPhPage: false\n    };\n  },\n  computed: {},\n  watch: {},\n  mounted() {\n    this.changeDialogWidth();\n    window.onresize = () => {\n      this.changeDialogWidth();\n    };\n    this.showEvent.data = this.$store.getters.plans;\n    this.showEvent.calMarks = this.$store.getters.planObj;\n    this.initCalendar();\n    console.log(this.showEvent.data);\n  },\n  methods: {\n    // calendar\n    initCalendar(setDate) {\n      const _data = [];\n      let date = new Date(setDate ? setDate : this.calDate);\n      date.setDate(1);\n      const beforN = date.getDay() == 0 ? 7 : date.getDay();\n      date.setDate(0);\n      const beforStart = date.getDate();\n      for (let a = 0; a < beforN - 1; a++) {\n        _data.push({\n          day: beforStart - a,\n          class: 'disD'\n        });\n      }\n      date = new Date(setDate ? setDate : this.calDate);\n      // last day of the month\n      date.setMonth(date.getMonth() + 1, 0);\n      const currentN = date.getDate();\n      const _year = date.getFullYear();\n      const _month = ('00' + (date.getMonth() + 1)).slice(-2);\n      for (let a = 1; a <= currentN; a++) {\n        let _imgIndex = undefined;\n        let _date = _year + '-' + _month + '-' + ('00' + a).slice(-2);\n        if (this.showEvent.calMarks[_date] && this.showEvent.calMarks[_date].length > 0) {\n          _imgIndex = parseInt(this.showEvent.calMarks[_date][0].category);\n        }\n        _data.push({\n          day: a,\n          class: 'currD',\n          img: _imgIndex\n        });\n      }\n      const afterN = 7 - (date.getDay() == 0 ? 7 : date.getDay());\n      for (let a = 1; a <= afterN; a++) {\n        _data.push({\n          day: a,\n          class: 'disD'\n        });\n      }\n      date.setDate(1);\n      this.calDataDate = date;\n      this.calData = _data;\n    },\n    preMonth() {\n      const date = new Date(this.calDataDate);\n      date.setMonth(date.getMonth() - 1);\n      this.initCalendar(date);\n    },\n    nextMonth() {\n      const date = new Date(this.calDataDate);\n      date.setMonth(date.getMonth() + 1);\n      console.log(date);\n      this.initCalendar(date);\n    },\n    changeDialogWidth() {\n      const num = document.body.clientWidth;\n      if (parseInt(num) <= 1300 && this.addEvent.width == '600px') {\n        this.addEvent.width = '95%';\n        this.showEvent.data = this.$store.getters.plans;\n        this.isPhPage = true;\n      } else if (parseInt(num) > 1300 && this.addEvent.width == '95%') {\n        this.addEvent.width = '600px';\n        this.showEvent.data = [];\n        this.isPhPage = false;\n      }\n    },\n    formatDate(date) {\n      const m = parseInt(date.split('-')[1]) - 1;\n      const d = date.split('-').pop();\n      return `${Months[m]} ${d}`;\n    },\n    calMonthsTxt() {\n      const date = new Date(this.calDataDate);\n      const m = date.getMonth();\n      return date.getFullYear() + ' ' + Months[m];\n    },\n    // plan list\n    showEventDialog(e) {\n      const date = toDay(e);\n      this.showEvent.open = true;\n      this.showEvent.date = date;\n      this.showEvent.data = this.showEvent.calMarks[date] ? this.showEvent.calMarks[date] : [];\n      this.addEvent.form.date = date;\n    },\n    // turn off list\n    closeEventDialog() {\n      this.showEvent.open = false;\n      this.date = undefined;\n      this.showEvent.data = [];\n    },\n    // cancel adding plan\n    closeAddEvent() {\n      this.addEvent.open = false;\n      this.resrt();\n      this.$refs.form.clearValidate();\n    },\n    openAddEvent() {\n      this.closeEventDialog();\n      this.addEvent.open = true;\n      this.addEvent.title = 'Add Plan';\n    },\n    resrt() {\n      this.addEvent.form = {\n        ...initPlan\n      };\n    },\n    pushEvent() {\n      this.$refs.form.validate(e => {\n        if (e) {\n          let isEdit = false;\n          if (this.addEvent.form.id) {\n            isEdit = true;\n          } else {\n            isEdit = false;\n            this.addEvent.form.id = Date.now();\n          }\n          if (!this.addEvent.form.date) this.addEvent.form.date = toDay();\n          isEdit ? this.$store.commit('editPlan', this.addEvent.form) : this.$store.commit('addPlan', this.addEvent.form);\n          this.closeAddEvent();\n          this.showEvent.data = this.$store.getters.plans;\n          this.showEvent.calMarks = this.$store.getters.planObj;\n          console.log(this.$store.getters.plans);\n        }\n      });\n    },\n    editPlan(item) {\n      this.closeEventDialog();\n      this.addEvent.open = true;\n      this.addEvent.title = 'Edit Plan';\n      this.addEvent.form = {\n        ...item\n      };\n    },\n    removePlan(item) {\n      this.$store.commit('removePlan', item);\n      this.showEvent.data = this.$store.getters.plans;\n      this.showEvent.calMarks = this.$store.getters.planObj;\n    }\n  }\n};","map":{"version":3,"names":["toDay","e","date","Date","getFullYear","getMonth","slice","getDate","fImage","require","yImage","mImage","gImage","fPimage","yPimage","mPimage","gPimage","Months","initPlan","id","name","category","time","partId","quantitative","components","mixins","props","data","calDate","calData","calPhImgArr","calDataDate","undefined","categoryOptions","label","value","img","partment","showEvent","open","title","calMarks","addEvent","form","width","rules","required","message","trigger","pattern","isPhPage","computed","watch","mounted","changeDialogWidth","window","onresize","$store","getters","plans","planObj","initCalendar","console","log","methods","setDate","_data","beforN","getDay","beforStart","a","push","day","class","setMonth","currentN","_year","_month","_imgIndex","_date","length","parseInt","afterN","preMonth","nextMonth","num","document","body","clientWidth","formatDate","m","split","d","pop","calMonthsTxt","showEventDialog","closeEventDialog","closeAddEvent","resrt","$refs","clearValidate","openAddEvent","pushEvent","validate","isEdit","now","commit","editPlan","item","removePlan"],"sources":["src/views/calendar.vue"],"sourcesContent":["<template>\r\n   <div style=\"background-color: #f3f3f3;padding: 1px 0px;\">\r\n    <div class=\"calendar\" v-if=\"!isPhPage\">\r\n        <div class=\"createBox\">\r\n            <p>Click in the calendar to create training plan</p>\r\n            <div class=\"addBtn\" @click=\"openAddEvent()\">Create new plans</div>\r\n            <div class=\"create_type\">\r\n                <div class=\"type_item\" data-i=\"1\">Fitness & Gym</div>\r\n                <div class=\"type_item\" data-i=\"2\">Yoga</div>\r\n                <div class=\"type_item\" data-i=\"3\">Mindfulness</div>\r\n                <div class=\"type_item\" data-i=\"4\">Gymnastics</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"calendarBox\">\r\n            <el-calendar>\r\n                <template\r\n                    slot=\"dateCell\"\r\n                    slot-scope=\"{date, data}\">\r\n                    <div @click=\"() => showEventDialog(date)\" style=\"overflow: hidden;position: relative;height: 140px;\">\r\n                        <p style=\"text-align: right;\" :class=\"data.isSelected ? 'is-selected' : ''\">\r\n                        {{ parseInt(data.day.split('-').pop()) }}\r\n                        </p>\r\n                        <template v-for=\"(value, key) in showEvent.calMarks\">\r\n                            <template v-if=\"data.day == key\">\r\n                                <div v-for=\"(item, index) in value\" :key=\"item.id\" class=\"planItem\" :data-t=\"item.category + 1\" :data-i=\"index\" :style=\"`top: ${70 + 10 * index}px;z-index: ${999 - index};`\" >{{ item.time }} min</div>\r\n                            </template>\r\n                        </template>\r\n                    </div>  \r\n                </template>\r\n            </el-calendar>\r\n        </div>\r\n    </div>\r\n    <div class=\"calendarPh\" v-if=\"isPhPage\">\r\n        <p class=\"cphTitle\">MY SCHEDULE</p>\r\n        <div class=\"calendarBoxPh\">\r\n            <div class=\"c_line c_action\">\r\n                <el-button @click=\"preMonth()\" type=\"text\" icon=\"el-icon-arrow-left\" />\r\n                <div>{{ calMonthsTxt() }}</div>\r\n                <el-button @click=\"nextMonth()\" type=\"text\" icon=\"el-icon-arrow-right\" />\r\n            </div>\r\n            <div class=\"c_line\">\r\n                <div class=\"c_th\">MON</div>\r\n                <div class=\"c_th\">TUE</div>\r\n                <div class=\"c_th\">WED</div>\r\n                <div class=\"c_th\">THU</div>\r\n                <div class=\"c_th\">FRI</div>\r\n                <div class=\"c_th\">SAT</div>\r\n                <div class=\"c_th\">SUN</div>\r\n            </div>\r\n            <div class=\"c_line\">\r\n                <div class=\"c_td\" v-for=\"(item, index) in calData\" :key=\"index\" :class=\"`${item.class} ${item.img != undefined ? 'eveted' : ''}`\" :style=\"`background: url(${calPhImgArr[item.img]}) 0px 0px no-repeat;`\">{{ item.day }}</div>\r\n            </div>\r\n        </div>\r\n        <hr>\r\n        <div style=\"padding: 0px 10px;\">\r\n            <div class=\"showEventCard\" v-if=\"showEvent.data.length > 0\">\r\n                <div class=\"eventCard\" v-for=\"item in showEvent.data\" :key=\"item.id\">\r\n                    <div class=\"eventImg\" :style=\"`background: url(${categoryOptions[item.category].img}) 0px 0px no-repeat;`\">\r\n                        <div class=\"doca\"></div><div class=\"docb\"></div><div class=\"docc\"></div><div class=\"docd\"></div>\r\n                    </div>\r\n                    <div class=\"eventInfo\">\r\n                        <div class=\"eventName\">{{ item.name }}</div>\r\n                        <div class=\"eventType\"><i class=\"el-icon-discount\"></i> {{ categoryOptions[item.category].label }} - {{ partment[item.partId].label }} - {{ item.quantitative }}(g)</div>\r\n                        <div class=\"eventTime\"><i class=\"el-icon-date\"></i> {{item.time}}min · {{ formatDate(item.date) }}</div>\r\n                    </div>\r\n                    <div style=\"width: 100%;text-align: right\">\r\n                        <div>\r\n                            <el-button icon=\"el-icon-edit\" type=\"success\" @click=\"editPlan(item)\"></el-button>\r\n                            <el-button icon=\"el-icon-delete\" type=\"danger\" @click=\"removePlan(item)\"></el-button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <el-empty description=\"No Plans\" v-if=\"showEvent.data.length <= 0\"></el-empty>\r\n        </div>\r\n        <div class=\"eventImg addEvent\" @click=\"openAddEvent()\">\r\n            <div class=\"doca\"></div><div class=\"docb\"></div><div class=\"docc\"></div><div class=\"docd\"></div>\r\n            PLAN NOW\r\n         </div>\r\n    </div>\r\n    <el-dialog :title=\"showEvent.title\" :visible=\"showEvent.open && !isPhPage\" width=\"1190px\" @close=\"closeEventDialog\">\r\n        <div class=\"showEventCard\" v-if=\"showEvent.data.length > 0\">\r\n            <div class=\"eventCard\" v-for=\"item in showEvent.data\" :key=\"item.id\">\r\n                <div class=\"eventImg\" :style=\"`background: url(${categoryOptions[item.category].img}) 0px 0px no-repeat;`\">\r\n                    <div class=\"doca\"></div><div class=\"docb\"></div><div class=\"docc\"></div><div class=\"docd\"></div>\r\n                </div>\r\n                <div class=\"eventInfo\">\r\n                    <div class=\"eventName\">{{ item.name }}</div>\r\n                    <div class=\"eventType\"><i class=\"el-icon-discount\"></i> {{ categoryOptions[item.category].label }} - {{ partment[item.partId].label }} - {{ item.quantitative }}(g)</div>\r\n                    <div class=\"eventTime\"><i class=\"el-icon-date\"></i> {{item.time}}min · {{ formatDate(item.date) }}</div>\r\n                </div>\r\n                <div style=\"width: 100%;text-align: right\">\r\n                    <div>\r\n                        <el-button icon=\"el-icon-edit\" type=\"success\" @click=\"editPlan(item)\">edit</el-button>\r\n                        <el-button icon=\"el-icon-delete\" type=\"danger\" @click=\"removePlan(item)\">delete</el-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <el-empty description=\"No Plans\" v-if=\"showEvent.data.length <= 0\"></el-empty>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"closeEventDialog\">CLOSE</el-button>\r\n            <el-button type=\"primary\" @click=\"openAddEvent\">PLAN NOW</el-button>\r\n        </span>\r\n    </el-dialog>\r\n    <el-dialog :title=\"addEvent.title\" :visible=\"addEvent.open\" :width=\"addEvent.width\"  @close=\"closeAddEvent\">\r\n        <el-form ref=\"form\" :model=\"addEvent.form\" label-position=\"top\" :rules=\"rules\">\r\n            <el-form-item label=\"Date\" prop=\"date\">\r\n                <el-date-picker\r\n                    v-model=\"addEvent.form.date\"\r\n                    type=\"date\"\r\n                    placeholder=\"Select Date\"\r\n                    value-format=\"yyyy-MM-dd\"\r\n                    />\r\n            </el-form-item>\r\n            <el-form-item label=\"Plan name\" prop=\"name\">\r\n                <el-input placeholder=\"input plan name\" v-model=\"addEvent.form.name\" />\r\n            </el-form-item>\r\n            <el-form-item label=\"Select category\" prop=\"category\">\r\n                <el-select style=\"width: 100%;\" placeholder=\"select category\" v-model=\"addEvent.form.category\">\r\n                    <el-option v-for=\"item in categoryOptions\" :key=\"item.value\" :value=\"item.value\" :label=\"item.label\" />\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"Plan duration\" prop=\"time\">\r\n                <el-input placeholder=\"input plan duration\" v-model=\"addEvent.form.time\">\r\n                    <template slot=\"append\">min</template>\r\n                </el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"Select partment\" prop=\"partId\">\r\n                <el-select style=\"width: 100%;\" placeholder=\"select partment\" v-model=\"addEvent.form.partId\">\r\n                    <el-option v-for=\"item in partment\" :key=\"item.value\" :value=\"item.value\" :label=\"item.label\" />\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"Plan quantitative\" prop=\"quantitative\">\r\n                <el-input placeholder=\"input plan quantitative\" v-model=\"addEvent.form.quantitative\">\r\n                    <template slot=\"append\">g</template>\r\n                </el-input>\r\n            </el-form-item>\r\n        </el-form>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n            <el-button @click=\"closeAddEvent\">CANCEL</el-button>\r\n            <el-button type=\"primary\" @click=\"pushEvent\">EXPLORE</el-button>\r\n        </span>\r\n    </el-dialog>\r\n   </div>\r\n</template>\r\n<script>\r\nconst toDay = (e) => {\r\n    const date = e ? new Date(e) : new Date();\r\n    return `${date.getFullYear()}-`+(`00${date.getMonth() + 1}`).slice(-2)+`-${('00'+date.getDate()).slice(-2)}`\r\n}\r\nconst fImage = require('@/assets/f_type.png');\r\nconst yImage = require('@/assets/y_type.png');\r\nconst mImage = require('@/assets/m_type.png');\r\nconst gImage = require('@/assets/g_type.png');\r\nconst fPimage = require('@/assets/Pattern1.png');\r\nconst yPimage = require('@/assets/Pattern2.png');\r\nconst mPimage = require('@/assets/Pattern3.png');\r\nconst gPimage = require('@/assets/Pattern4.png');\r\nconst Months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\nconst initPlan = {\r\n    id: null,\r\n    date: null,\r\n    name: null,\r\n    category: null,\r\n    time: null,\r\n    partId: null,\r\n    quantitative: null\r\n}\r\nexport default {\r\n   name: 'CalendarPage',\r\n   components: {\r\n     \r\n   },\r\n   mixins: [],\r\n   props: {\r\n     \r\n   },\r\n   data() {\r\n     return {\r\n       calDate: toDay(),\r\n       calData: [],\r\n       calPhImgArr: [fPimage, yPimage, mPimage, gPimage],\r\n       calDataDate: undefined,\r\n       categoryOptions: [\r\n        {label: 'Fitness & Gym', value: 0, img: fImage},\r\n        {label: 'Yoga', value: 1, img: yImage},\r\n        {label: 'Mindfulness', value: 2, img: mImage},\r\n        {label: 'Gymnastics', value: 3, img: gImage},\r\n       ],\r\n       partment: [\r\n        {label: 'chest', value: 0},\r\n        {label: 'shoulder', value: 1},\r\n        {label: 'back', value: 2},\r\n        {label: 'buttocks', value: 3},\r\n        {label: 'leg', value: 4},\r\n        {label: 'biceps', value: 5},\r\n        {label: 'triceps', value: 6}\r\n       ],\r\n       showEvent: {\r\n        open: false,\r\n        date: undefined,\r\n        title: 'Plans',\r\n        data: [],\r\n        calMarks: []\r\n       },\r\n       addEvent: {\r\n        open: false,\r\n        title: 'Add Plan',\r\n        form: {...initPlan},\r\n        width: '600px'\r\n       },\r\n       rules: {\r\n        name: [ { required: true, message: \"Please input name\", trigger: \"blur\" }],\r\n        category: [ { required: true, message: \"Please select category\", trigger: \"blur\" }],\r\n        time: [ {required: true, message: \"Please input time\", trigger: \"blur\" },\r\n            {pattern: /^\\d+$/, message: \"Please input number\", trigger: \"blur\" }],\r\n        partId: [{ required: true, message: \"Please select partment\", trigger: \"blur\" }],\r\n        quantitative: [{required: true, message: \"Please input quantitative\", trigger: \"blur\" },\r\n            {pattern: /^\\d+$/, message: \"Please input number\", trigger: \"blur\" }],\r\n        date: [{ required: true, message: \"Please select date\", trigger: \"blur\" }]\r\n       },\r\n       isPhPage: false,\r\n     }\r\n   },\r\n   computed: {\r\n     \r\n   },\r\n   watch: {\r\n     \r\n   },\r\n   mounted() {\r\n    this.changeDialogWidth()\r\n     window.onresize = () => {\r\n        this.changeDialogWidth()\r\n     }\r\n    this.showEvent.data = this.$store.getters.plans;\r\n    this.showEvent.calMarks = this.$store.getters.planObj;\r\n    this.initCalendar()\r\n    console.log(this.showEvent.data)\r\n   },\r\n   methods: {\r\n    // calendar\r\n    initCalendar(setDate) {\r\n        const _data = [];\r\n        let date = new Date(setDate ? setDate : this.calDate);\r\n        date.setDate(1);\r\n        const beforN = date.getDay() == 0 ? 7 : date.getDay();\r\n        date.setDate(0);\r\n        const beforStart = date.getDate();\r\n        for(let a = 0; a < beforN - 1; a++){\r\n            _data.push({day: beforStart -a, class: 'disD'})\r\n        }\r\n        \r\n        date = new Date(setDate ? setDate : this.calDate);\r\n        // last day of the month\r\n        date.setMonth(date.getMonth() + 1, 0)\r\n        const currentN = date.getDate();\r\n        const _year = date.getFullYear();\r\n        const _month = ('00' + (date.getMonth() + 1)).slice(-2)\r\n        for(let a = 1; a <= currentN; a++) {\r\n            let _imgIndex = undefined;\r\n            let _date = _year+'-'+_month+'-'+('00'+a).slice(-2);\r\n            if(this.showEvent.calMarks[_date] && this.showEvent.calMarks[_date].length > 0) {\r\n                _imgIndex = parseInt(this.showEvent.calMarks[_date][0].category)\r\n            }\r\n            _data.push({day: a, class: 'currD', img: _imgIndex})\r\n        }\r\n        const afterN = 7 - (date.getDay() == 0 ? 7 : date.getDay());\r\n        for(let a =1; a <= afterN; a++) {\r\n            _data.push({day: a, class: 'disD'})\r\n        }\r\n        date.setDate(1)\r\n        this.calDataDate = date;\r\n        this.calData = _data;\r\n    },\r\n    preMonth() {\r\n        const date = new Date(this.calDataDate);\r\n        date.setMonth(date.getMonth() - 1);\r\n        this.initCalendar(date);\r\n    },\r\n    nextMonth() {\r\n        const date = new Date(this.calDataDate);\r\n        date.setMonth(date.getMonth() + 1);\r\n        console.log(date)\r\n        this.initCalendar(date);\r\n    },\r\n    changeDialogWidth() {\r\n        const num = document.body.clientWidth\r\n        if(parseInt(num) <= 1300 && this.addEvent.width == '600px') {\r\n            this.addEvent.width = '95%';\r\n            this.showEvent.data = this.$store.getters.plans;\r\n            this.isPhPage = true;\r\n        }else if(parseInt(num) > 1300 && this.addEvent.width == '95%'){\r\n            this.addEvent.width = '600px';\r\n            this.showEvent.data = [];\r\n            this.isPhPage = false;\r\n        }\r\n    },\r\n    formatDate(date) {\r\n        const m = parseInt(date.split('-')[1]) - 1;\r\n        const d = date.split('-').pop();\r\n        return `${Months[m]} ${d}`\r\n    },\r\n    calMonthsTxt() {\r\n        const date = new Date(this.calDataDate);\r\n        const m = date.getMonth();\r\n        return date.getFullYear() + ' ' + Months[m]\r\n    },\r\n    // plan list\r\n    showEventDialog(e) {\r\n        const date = toDay(e);\r\n        this.showEvent.open = true;\r\n        this.showEvent.date = date;\r\n        this.showEvent.data = this.showEvent.calMarks[date] ? this.showEvent.calMarks[date] : [];\r\n        this.addEvent.form.date = date;\r\n    },\r\n    // turn off list\r\n    closeEventDialog() {\r\n        this.showEvent.open = false;\r\n        this.date = undefined;\r\n        this.showEvent.data = [];\r\n    },\r\n    // cancel adding plan\r\n    closeAddEvent() {\r\n        this.addEvent.open = false;\r\n        this.resrt();\r\n        this.$refs.form.clearValidate();\r\n    },\r\n    openAddEvent() {\r\n        this.closeEventDialog();\r\n        this.addEvent.open = true;\r\n        this.addEvent.title = 'Add Plan'\r\n    },\r\n    resrt() {\r\n        this.addEvent.form = {\r\n           ...initPlan\r\n        }\r\n    },\r\n    pushEvent() {\r\n        this.$refs.form.validate(e => {\r\n            if(e) {\r\n                let isEdit = false;\r\n                if(this.addEvent.form.id) {\r\n                    isEdit = true;\r\n                }else {\r\n                    isEdit = false;\r\n                    this.addEvent.form.id = Date.now();\r\n                }\r\n                if(!this.addEvent.form.date) this.addEvent.form.date = toDay();\r\n                isEdit ? this.$store.commit('editPlan', this.addEvent.form) : this.$store.commit('addPlan', this.addEvent.form);\r\n                this.closeAddEvent();\r\n                this.showEvent.data = this.$store.getters.plans;\r\n                this.showEvent.calMarks = this.$store.getters.planObj;\r\n                console.log(this.$store.getters.plans)\r\n            }\r\n            \r\n        })\r\n    },\r\n    editPlan(item) {\r\n        this.closeEventDialog();\r\n        this.addEvent.open = true;\r\n        this.addEvent.title = 'Edit Plan';\r\n        this.addEvent.form = {...item};\r\n    },\r\n    removePlan(item) {\r\n        this.$store.commit('removePlan', item)\r\n        this.showEvent.data = this.$store.getters.plans;\r\n        this.showEvent.calMarks = this.$store.getters.planObj;\r\n    }\r\n   }\r\n};\r\n</script>\r\n<style lang='css' scoped>\r\n::v-deep .el-calendar-table .el-calendar-day{\r\n    height: 150px;\r\n}\r\n::v-depp .el-button--mini{font-size: 20px;}\r\n::v-deep .el-calendar__title{font-size: 20px;}\r\n.calendar{\r\n    max-width: 1500px;\r\n    margin: 50px auto;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n.createBox{width: 240px;padding: 30px;background-color: #fff;height: 400px;}\r\n.calendarBox{width: calc(100% - 350px);margin-left: 50px;}\r\n.createBox>p{color: #777e90;font-size: 17px;line-height: 30px;margin-bottom: 30px;}\r\n.addBtn{padding: 20px;background-color: #4ba06c;color: #fff;font-size: 16px;position: relative;border-radius: 10px;margin-bottom: 30px;cursor: pointer;}\r\n.addBtn:hover{background-color: #4ba06cb2;}\r\n.addBtn::after{content: \"＋\";position: absolute;right: 10px;font-size: 40px;top: 2px;}\r\n.create_type{display: flex;flex-direction: column;}\r\n.type_item{padding-left: 20px;font-size: 16px;line-height: 20px;margin-bottom: 20px;position: relative;}\r\n.type_item::after{position: absolute;content: \" \";width: 10px;height: 10px;background-color: red;border-radius: 50%;left: 0px;top: calc(50% - 5px);}\r\n.type_item[data-i='1']::after{background-color: #64d26f;}\r\n.type_item[data-i='2']::after{background-color: #5564d7;}\r\n.type_item[data-i='3']::after{background-color: #f1be5b;}\r\n.type_item[data-i='4']::after{background-color: #e04b43;}\r\n\r\n.planItem{position: absolute;top: 70px;background-color: #5564d7;width: calc(100% - 27px);padding: 5px;color: #fff;border-radius: 10px;padding-left: 20px;border: 1px solid #fff;}\r\n.planItem::after{width: 8px;height: 8px;position: absolute;content: \" \";left: 5px;top: 12px;background-color: #fff;border-radius: 50%;}\r\n.planItem[data-t='1']{background-color: #48a151fd;}\r\n.planItem[data-t='2']{background-color: #5260c9;}\r\n.planItem[data-t='3']{background-color: #c29d54;}\r\n.planItem[data-t='4']{background-color: #ca4e47;}\r\n.planItem[data-i='0']{z-index: 999;}\r\n.showEventCard{display: flex;flex-direction: row;flex-wrap: wrap;}\r\n.eventCard{width: 500px;display: flex;flex-direction: row;border: 3px solid #111;padding: 20px;border-radius: 10px;margin-right: 20px;margin-bottom: 20px;flex-wrap: wrap;}\r\n.eventImg{height: 130px;width: 90px;margin-right: 20px;background-position: center !important;background-size: 100% auto !important;position: relative;}\r\n.eventImg>div{position: absolute;height: 15px;width: 15px;border-radius: 50%;background-color: #fff;}\r\n.doca{top: -6px;left: -6px;}\r\n.docb{top: -6px;right: -6px;}\r\n.docc{bottom: -6px;left: -6px;}\r\n.docd{bottom: -6px;right: -6px;}\r\n.eventInfo{width: calc(100% - 150px);}\r\n.eventName{font-size: 25px;line-height: 40px;margin-bottom: 20px;color: #111;}\r\n.eventType,.eventTime{font-size: 20px;margin-bottom: 10px;color: #111;}\r\n.calendarPh{background-color: #fff;}\r\n.cphTitle{font-size: 30px;line-height: 50px;padding: 0px 10px;}\r\n.calendarBoxPh{}\r\n.c_line{display: flex;flex-direction: row;justify-content: space-between;flex-wrap: wrap;}\r\n.c_action{margin-bottom: 20px;}\r\n.c_action>div{font-size: 16px;line-height: 40px;}\r\n.c_th{width: 13vw;text-align:center;color: #8991a4;}\r\n.c_td{width: 13vw;text-align: center;height: 13vw;line-height: 13vw;}\r\n.c_td.disD{color: #aaa;}\r\n.c_td{background-size: 10vw 10vw !important;background-position: center !important;}\r\n.eveted{color: #fff;}\r\n.addEvent{width: 90%;background-color: #000;color: #fff;padding: 20px 0px;text-align: center;height: auto;margin: 20px auto;margin: 20px auto;}\r\n@media screen and (max-width: 1300px){\r\n.showEventCard{justify-content: space-between;}\r\n.eventCard{margin: 20px auto;}\r\n.eventName{font-size: 14px;line-height: 24px;font-weight: bold;}\r\n.eventTime,.eventType{font-size: 12px;}\r\n.c_th{text-align:center;color: #8991a4;font-size: 12px;}\r\n.c_td{text-align: center;height: 10vw;line-height: 10vw;font-size: 12px;}\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}